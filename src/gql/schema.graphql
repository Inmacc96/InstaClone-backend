scalar Void

enum UploadType {
  Avatar
  Post
}

type User {
  id: ID!
  name: String!
  username: String!
  email: String!
  avatar: String
  website: String
  description: String
  password: String!
  createdAt: String
}

type Token {
  token: String
}

type UploadUrl {
  timestamp: Int!
  signature: String!
  public_id: String!
}

type Post {
  id: ID!
  idUser: ID!
  urlFile: String!
  typeFile: String!
  createdAt: String
}

input UserInput {
  name: String!
  username: String!
  email: String!
  password: String!
}

input AuthInput {
  email: String!
  password: String!
}

input UserUpdateInput {
  name: String
  email: String
  oldPassword: String
  newPassword: String
  website: String
  description: String
}

type Query {
  # User
  getUser(id: ID, username: String): User!
  generateUploadUrl(folder: String!, uploadType: UploadType!): UploadUrl!
  searchUsers(search: String!): [User!]!

  #Follow
  isFollowing(username: String!): Boolean
  getFollowers(username: String!): [User!]!
  getFollowings(username: String!): [User!]!

  #Post
  getPosts(username: String!): [Post!]!
}

type Mutation {
  # User
  newUser(input: UserInput!): User
  authUser(input: AuthInput!): Token!
  updateAvatar(urlImage: String!): User!
  deleteAvatar: User!
  updateUser(input: UserUpdateInput!): User!

  # Follow
  follow(username: String!): Void
  unFollow(username: String!): Void

  # Post
  publish(urlFile: String!, typeFile: String!): Post!
}
